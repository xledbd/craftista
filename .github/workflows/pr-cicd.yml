name: Pull request CI/CD

on:
  pull_request: 
    branches: [ "main" ]
    paths:
      - 'frontend/**'
      - 'catalogue/**'
      - 'recommendation/**'
      - 'voting/**'
    types: 
      - opened
      - reopened
      - synchronize

jobs:
  changed-files:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changed-files.outputs.frontend_any_modified }}
      catalogue: ${{ steps.changed-files.outputs.catalogue_any_modified }}
      recommendation: ${{ steps.changed-files.outputs.recommendation_any_modified }}
      voting: ${{ steps.changed-files.outputs.voting_any_modified }}
      modules: ${{ steps.changed-files.outputs.changed_keys }}
    steps:
    - uses: actions/checkout@v4
  
    - name: Get changed files in all modules
      id: changed-files
      uses: tj-actions/changed-files@v45
      with:
        matrix: true
        files_yaml: |
          frontend:
            - frontend/**
          catalogue:
            - catalogue/**
          recommendation:
            - recommendation/**
          voting:
            - voting/**

  build-frontend:
    needs: changed-files
    name: Build Frontend
    uses: ./.github/workflows/frontend.yml
    if: needs.changed-files.outputs.frontend == 'true'
    secrets: inherit

  build-catalogue:
    needs: changed-files
    name: Build Catalogue
    uses: ./.github/workflows/catalogue.yml
    if: needs.changed-files.outputs.catalogue == 'true'
    secrets: inherit

  build-recommendation:
    needs: changed-files
    name: Build Recommendation
    uses: ./.github/workflows/recommendation.yml
    if: needs.changed-files.outputs.recommendation == 'true'
    secrets: inherit

  build-voting:
    needs: changed-files
    name: Build Voting
    uses: ./.github/workflows/voting.yml
    if: needs.changed-files.outputs.voting == 'true'

  package:
    needs: [changed-files, build-catalogue, build-frontend, build-recommendation, build-voting]
    if: ${{ !failure() && !cancelled() }}
    strategy:
      matrix:
        module: ${{ fromJson(needs.changed-files.outputs.modules) }}
    name: Package
    uses: ./.github/workflows/package.yml
    with:
      module: ${{ matrix.module }}
    secrets: inherit

  deploy-dev:
    name: Deploy to dev
    needs: [changed-files, package]
    if: ${{ !failure() && !cancelled() }}
    runs-on: minikube-wsl
    environment: dev
    
    steps:
    - uses: actions/checkout@v4

    - name: Generate overrides.yaml file
      run: |
        for i in $(yq '. | .[]' <<< $MODULES); do
          echo -e "$i:\n  image:\n    tag: \"${{ github.event.pull_request.number }}\"" >> deployment/overrides.yaml
        done
      env:
        MODULES: ${{ needs.changed-files.outputs.modules }}

    - name: Debug overrides.yaml
      run: cat deployment/overrides.yaml

    - name: Create a secret with AWS credentials
      run: |
        kubectl get namespace ${{ github.event.pull_request.number }} || { \
        kubectl create namespace ${{ github.event.pull_request.number }}
        kubectl create secret generic aws-creds \
        -n ${{ github.event.pull_request.number }} \
        --from-literal=AWS_ACCESS_KEY_ID='${{ secrets.AWS_ACCESS_KEY_ID }}' \
        --from-literal=AWS_SECRET_ACCESS_KEY='${{ secrets.AWS_SECRET_ACCESS_KEY }}' \
        --from-literal=AWS_DEFAULT_REGION='${{ vars.AWS_REGION }}'
        }

    - name: Run helm upgrade
      run: >-
        helm upgrade dev ./deployment
        -f deployment/env/dev.yaml
        -f deployment/overrides.yaml
        --install --create-namespace --atomic -n ${{ github.event.pull_request.number }}
